/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StarPanel.java
 *
 * Created on Jul 23, 2014, 10:23:56 PM
 */
package constellations2;

import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Antero Nevarez-Lira
 */
public class StarPanel2 extends javax.swing.JPanel {

    //a list to hold all the stars
    private List<Star> stars;
    //a map to hold the named stars; the key is the name, and value is the star object
    private Map<String, Star> namedStars;
    //a map to hold the constellations; the key is the constellation name, 
    //and value is a list of strings, each being a star name
    private Map<String, Constellation> constellations;
    //a list of the visible constellations
    private List<Constellation> visibleConstellations;

    /** Creates new form StarPanel2 */
    public StarPanel2() throws IOException {
        initComponents();
        stars = new LinkedList<Star>();
        namedStars = new TreeMap<String, Star>();
        constellations = new TreeMap<String, Constellation>();
        visibleConstellations = new LinkedList<Constellation>();
        readStars();
        readAllConstellations();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, 400)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, 400)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

//the Star class
    private class Star {
        //holds the x-coordinate of the star

        private double xCoor;
        //holds the y-coordinate of the star
        private double yCoor;
        //holds the z-coordinate of the star
        private double zCoor;
        //holds a unique integer identifier for the star
        private int henryDraperNum;
        //holds the brightness of the star
        private double magnitude;
        //holds another unique identifier
        private int harvardRevisedNum;
        //holds the multiple names of a star
        private ArrayList<String> starNames;

        public Star() {
            xCoor = 0.0;
            yCoor = 0.0;
            zCoor = 0.0;
            henryDraperNum = 0;
            magnitude = 0.0;
            harvardRevisedNum = 0;
            starNames = new ArrayList<String>();

        }

        private void setX_Coor(double x) {
            xCoor = x;
        }

        public double getX_coor() {
            return xCoor;
        }

        private void setY_Coor(double y) {
            yCoor = y;
        }

        public double getY_coor() {
            return yCoor;
        }

        private void setZ_Coor(double z) {
            zCoor = z;
        }

        public double getZ_coor() {
            return zCoor;
        }

        private void setHendyDraper(int idNum) {
            henryDraperNum = idNum;
        }

        public double getHenryDraper() {
            return henryDraperNum;
        }

        private void setMagnitude(double brightness) {
            magnitude = brightness;
        }

        public double getMagnitude() {
            return magnitude;
        }

        private void setHarvardRevised(int idNum2) {
            harvardRevisedNum = idNum2;
        }

        public double getHardvardRevised() {
            return harvardRevisedNum;
        }

        private void addName(String starName) {
            starNames.add(starName);
        }
    }

    private void readStars() throws IOException {

        try {
            Scanner file = new Scanner(new File("C:\\Users\\Antero Nevarez-Lira\\Documents\\NetBeansProjects\\Constellations\\src\\constellations\\stars.txt"));
            String starInfo = "";

            while (file.hasNextLine()) {
                starInfo = file.nextLine();
                Star star = new Star();
                String[] infoArray = starInfo.split(" ");
                star.setX_Coor(Double.parseDouble(infoArray[0]));
                star.setY_Coor(Double.parseDouble(infoArray[1]));

                if (infoArray[2].charAt(0) == '-') {
                    star.setZ_Coor(Double.parseDouble(infoArray[2].substring(1)) * -1.0);
                } else {
                    star.setZ_Coor(Double.parseDouble(infoArray[2]));
                }

                star.setHendyDraper(Integer.parseInt(infoArray[3]));
                star.setMagnitude(Double.parseDouble(infoArray[4]));
                star.setHarvardRevised(Integer.parseInt(infoArray[5]));

                if (infoArray.length > 6) {
                    String starNames = "";
                    for (int x = 6; x < infoArray.length; x++) {
                        starNames += infoArray[x] + " ";
                    }

                    String[] starNameArray = starNames.split(";");
                    for (int x = 0; x < starNameArray.length; x++) {
                        if(starNameArray[x].charAt(0) == ' ')
                        {
                            starNameArray[x] = starNameArray[x].substring(1);
                        }
                        star.addName(starNameArray[x]);
                        //System.out.println("star name: " + starNameArray[x]);
                        namedStars.put(starNameArray[x], star);
                    }
                }

                stars.add(star);
            }
            System.out.println("--------------------------------------------------------------");
            
            Iterator crawler = namedStars.entrySet().iterator();
            int count = 1;
            while(crawler.hasNext())
            {
                System.out.println( count + ") Star Name: " + crawler.next());
                count++;
            }
            
            //System.out.println("star name: " + namedStars.entrySet());
            System.out.println("--------------------------------------------------------------");
        } catch (IOException e) {
            System.out.println("ERROR! THE FILE CANNOT BE FOUND.");
        }
    }

    private int xToPixel(Star star) {
        int centerX = getWidth()/2;
        int xToPixel = 0;
        
        xToPixel = (int)(centerX + (centerX*star.getX_coor()));
        return xToPixel;
    }

    private int yToPixel(Star star) {
        int centerY = getHeight()/2;
        int yToPixel = 0;

        yToPixel = (int)(centerY - (centerY * star.getY_coor()) );
        return yToPixel;
    }

    private int findRadius(Star star) {
        double radius = 0.0;
        radius = 6.0 - star.getMagnitude();
        return (int) radius;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
//        g.setColor(Color.black);
//        g.drawLine((getWidth()/2), 0, (getWidth()/2), getHeight());
//        g.drawLine(0,(getHeight()/2), getWidth(), (getHeight()/2) );
        
        g.setColor(Color.white);
        Star currentStar;
        for (int index = 0; index < stars.size(); index++) {
            currentStar = stars.get(index);
            int x = xToPixel(currentStar);
            int y = yToPixel(currentStar);
            int radius = findRadius(currentStar);
            if (currentStar.zCoor >= 0.0) {
                //System.out.println((index + 1) + ")  " + currentStar.xCoor + " ("+ x +"), " + currentStar.yCoor + " ("+ y +"), " + currentStar.zCoor );
                g.fillOval(x - radius, y - radius, radius * 2, radius * 2);
            }
        }
        
        //g.setColor(Color.black);
        for (int x = 0; x < visibleConstellations.size(); x++) {
            Constellation currentCons = visibleConstellations.get(x);
            //System.out.println("-------------------------------------------------");
            //System.out.println("visible constellation: " + currentCons.);
            //System.out.println(currentCons.starNamePairs.toString());
            //System.out.println("-------------------------------------------------");
            List<String[]> pairList = currentCons.starNamePairs;

            for (int y = 0; y < pairList.size(); y++) {
                //String starName = pairList.get(y)[0].toString();
                //Star a = new Star();
                String[] starPair = pairList.get(y);
                if(starPair.length > 1)
                {
                    
                    Star a = (Star)namedStars.get(starPair[0]);
                    Star b = (Star)namedStars.get(starPair[1]);
                
                    //if( a != null && b != null)
                    //{
                        int starAxPixel = xToPixel(a), starAyPixel = yToPixel(a);
                        int starBxPixel = xToPixel(b), starByPixel = yToPixel(b);
                        g.drawLine(starAxPixel, starAyPixel, starBxPixel, starByPixel);
                    //}                    
                }
                
                
            }
        }

    }
    
    public Constellation getVisibleConstellation(int pos)
    {
        return visibleConstellations.get(pos); 
    }
    
    public List<String[]> getPairList(int pos)
    {
        return (getVisibleConstellation(pos)).starNamePairs;
    }

    private class Constellation {

        private List<String[]> starNamePairs;

        public Constellation() {
            starNamePairs = new LinkedList<String[]>();
        }

        private void readConstellation(String constellationName) {
            try {
                Scanner file = new Scanner(new File("C:\\Users\\Antero Nevarez-Lira\\Documents\\NetBeansProjects\\Constellations\\src\\constellations\\" + constellationName + ".txt"));
                while (file.hasNextLine()) {
                    String[] starNames = file.nextLine().split(",");
                    starNamePairs.add(starNames);
                }
                constellations.put(constellationName, this);
            } catch (FileNotFoundException ex) {
                System.out.println("Incorrect File name.");
            }
        }
    }

    private void readAllConstellations() {
        //String[] constellationNames = {"BigDipper", "Bootes", "Cassiopeia", "Gemini", "Hydra", "UrsaMajor", "UrsaMinor"};
        String[] constellationNames = {"BigDipper"};
        for (int x = 0; x < constellationNames.length; x++) {
            Constellation currentCons = new Constellation();
            currentCons.readConstellation(constellationNames[x]);
            //constellations.put(constellationNames[x], currentCons);
            visibleConstellations.add(currentCons);
        }
    }
}
